#ifndef OPENCLX_ARRAY_VIEW
#define OPENCLX_ARRAY_VIEW

#include <cstdint>

namespace clx {

    template <class T>
    class array_view {

    public:
        using value_type = T;
        using pointer = value_type*;
        using const_pointer = const value_type*;
        using reference = value_type&;
        using const_reference = const value_type&;
        using size_type = std::size_t;

    private:
        const value_type* _data;
        size_type _size;

    public:

        inline
        array_view(): _data{nullptr}, _size{0} {}

        inline
        array_view(const value_type* data, size_type size):
        _data(data), _size(size) {}

        inline
        array_view(const value_type& value):
        _data(&value), _size(1) {}

        template <class Container>
        inline
        array_view(const Container& cont):
        _data(cont.data()), _size(cont.size()) {}

        inline const_pointer data() const { return this->_data; }
        inline size_type size() const { return this->_size; }
        inline const_pointer begin() const { return this->_data; }
        inline const_pointer end() const { return this->_data + this->_size; }
        inline const_reference front() const { return *this->begin(); }
        inline const_reference back() const { return *(this->end()-1); }
        inline bool empty() const { return this->_size == 0; }

    };

    template <>
    class array_view<void> {

    public:
        using value_type = void;
        using pointer = value_type*;
        using const_pointer = const value_type*;
        using size_type = std::size_t;

    private:
        mutable value_type* _data;
        size_type _size;

    public:

        inline
        array_view(): _data{nullptr}, _size{0} {}

        inline
        array_view(pointer data, size_type size):
        _data(data), _size(size) {}

        template <class Container>
        inline
        array_view(const Container& cont):
        _data(cont.data()), _size(cont.size()) {}

        inline pointer data() const { return this->_data; }
        inline pointer data() { return this->_data; }
        inline size_type size() const { return this->_size; }
        inline bool empty() const { return this->_size == 0; }

    };

}

#endif // vim:filetype=cpp
