#ifndef OPENCLX_COMMAND_QUEUE
#define OPENCLX_COMMAND_QUEUE

#include <vector>

#include <openclx/command_queue_flags>
#include <openclx/context>
#include <openclx/device>
#include <openclx/error>
#include <openclx/forward>

namespace clx {

    class command_queue {

    private:
        command_queue_type _ptr = nullptr;

    public:

        inline explicit
        command_queue(command_queue_type ptr): _ptr(ptr) {}

        inline explicit
        command_queue(
            clx::context context,
            clx::device device,
            const command_queue_properties& prop
        ):
        #if CL_TARGET_VERSION >= 200
        _ptr(make_200(context.get(), device, prop)) {}
        #else
        _ptr(make_100(context.get(), device, prop)) {}
        #endif

        inline explicit
        command_queue(clx::context context, clx::device device, command_queue_flags flags):
        command_queue(context, device, command_queue_properties(flags)) {}

        inline explicit
        command_queue(
            clx::context context,
            clx::device device,
            command_queue_flags flags,
            unsigned_int_type size
        ):
        command_queue(context, device, command_queue_properties(flags, size)) {}

        inline void flush() { CLX_CHECK(::clFlush(this->_ptr)); }
        inline void finish() { CLX_CHECK(::clFinish(this->_ptr)); }

        #if CL_TARGET_VERSION <= 110 || defined(CL_USE_DEPRECATED_OPENCL_1_1_APIS)
        inline void
        barrier() {
            CLX_CHECK(::clEnqueueBarrier(this->_ptr));
        }
        #endif

        #if CL_TARGET_VERSION >= 210
        void
        make_default();
        #endif

        ::clx::device device() const;
        ::clx::context context() const;
        std::vector<command_queue_flags_type> properties() const;
        unsigned_int_type num_references() const;

        inline command_queue_type get() noexcept { return this->_ptr; }
        inline const command_queue_type get() const noexcept { return this->_ptr; }

        command_queue() = default;
        inline ~command_queue() { this->release(); }

        inline
        command_queue(const command_queue& rhs): _ptr(rhs._ptr) { this->retain(); }

        inline command_queue&
        operator=(const command_queue& rhs) {
            command_queue tmp(rhs);
            this->swap(tmp);
            return *this;
        }

        inline
        command_queue(command_queue&& rhs): _ptr(rhs._ptr) { rhs._ptr = nullptr; }

        inline command_queue&
        operator=(command_queue&& rhs) { this->swap(rhs); return *this; }

        inline void
        release() {
            if (this->_ptr) {
                CLX_CHECK(::clReleaseCommandQueue(this->_ptr));
                this->_ptr = nullptr;
            }
        }

        inline void
        retain() {
            if (this->_ptr) {
                CLX_CHECK(::clRetainCommandQueue(this->_ptr));
            }
        }

        inline void
        swap(command_queue& rhs) {
            std::swap(this->_ptr, rhs._ptr);
        }

    private:

        #if CL_TARGET_VERSION >= 200
        static command_queue_type
        make_200(context_type ctx, ::clx::device dev, const command_queue_properties& prop);
        #endif

        #if CL_TARGET_VERSION <= 120 || defined(CL_USE_DEPRECATED_OPENCL_1_2_APIS)
        static command_queue_type
        make_100(context_type ctx, ::clx::device dev, const command_queue_properties& prop);
        #endif

    };

    inline void
    swap(command_queue& lhs, command_queue& rhs) {
        lhs.swap(rhs);
    }

}

#endif // vim:filetype=cpp
