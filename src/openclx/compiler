#ifndef OPENCLX_COMPILER
#define OPENCLX_COMPILER

#include <string>
#include <unordered_map>
#include <vector>

#include <openclx/context>
#include <openclx/device>
#include <openclx/program>

namespace clx {

	class compiler {

	public:
		typedef std::vector<device> device_array;
		typedef std::unordered_map<std::string,program> program_map;

	private:
		typedef std::hash<std::string> hash_type;

	private:
		context _context;
		program_map _programs;
		device_array _devices;
		std::string _salt;
		std::string _options;
		std::string _source_directory;
		std::string _binary_directory;
		std::string _suffix;
		bool _cache = true;

	public:

		program
		compile(const std::string& filename);

		std::string
		errors(const program& prg) const;

		void compile();
		void unload();
		void clear_cache();

		::clx::kernel kernel(
			const std::string& filename,
			const char* name
		);

		void
		devices(const device_array& rhs);

		inline const device_array&
		devices() const {
			return this->_devices;
		}

		inline void
		options(const std::string& rhs) {
			this->_options = rhs;
		}

		inline const std::string&
		options() const {
			return this->_options;
		}

		inline void
		source_directory(const std::string& rhs) {
			this->_source_directory = rhs;
		}

		inline const std::string&
		source_directory() const {
			return this->_source_directory;
		}

		inline void
		binary_directory(const std::string& rhs) {
			this->_binary_directory = rhs;
		}

		inline const std::string&
		binary_directory() const {
			return this->_binary_directory;
		}

		inline void
		suffix(const std::string& rhs) {
			this->_suffix = rhs;
		}

		inline const std::string&
		suffix() const {
			return this->_suffix;
		}

		inline const program_map&
		programs() const {
			return this->_programs;
		}

		inline void
		cache(bool b) {
			this->_cache = b;
		}

		inline bool
		cache() const {
			return this->_cache;
		}

	private:

		void
		compile_from_source(program& prg, const std::string& src);

		std::string
		file_to_string(const std::string& filename) const;

		std::string binary_path(
			const std::string& filename,
			hash_type::result_type number
		) const;

		inline const std::string&
		salt() const {
			return this->_salt;
		}

		void salts();

	};

}

#endif // vim:filetype=cpp
