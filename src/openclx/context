#ifndef OPENCLX_CONTEXT
#define OPENCLX_CONTEXT

#include <string>
#include <vector>

#include <openclx/command_queue>
#include <openclx/command_queue_flags>
#include <openclx/error>
#include <openclx/image>
#include <openclx/image_descriptor>
#include <openclx/image_format>
#include <openclx/memory_flags>
#include <openclx/memory_objects>
#include <openclx/sampler>
#include <openclx/svm_flags>
#include <openclx/types>

namespace clx {

	class context {

	private:
		context_type _ptr = nullptr;

	public:

		inline explicit
		context(context_type ptr): _ptr(ptr) {}

		std::vector<device>
		devices() const;

		inline std::vector<command_queue>
		command_queues(command_queue_flags flags) const {
			#if CL_TARGET_VERSION >= 200
			return this->command_queues_200(flags);
			#else
			return this->command_queues_100(flags);
			#endif
		}

		::clx::program program(const std::string& src) const;
		::clx::program program(const array_view<binary>& binaries) const;
		#if CL_TARGET_VERSION >= 200
		::clx::program program(const intermediate_language& il) const;
		#endif

		#if CL_TARGET_VERSION >= 120
		::clx::header header(const std::string& name, const std::string& src) const;
		#endif

		#if CL_TARGET_VERSION >= 120
		::clx::program builtin_program(const std::string& kernel_names) const;
		unsigned_int_type num_devices() const;
		#endif

		inline ::clx::image
		image(
			memory_flags flags,
			const image_format& format,
			const image_descriptor& descriptor,
			void* host_pointer=nullptr
		) const {
			#if CL_TARGET_VERSION >= 200
			return this->image_200(flags, format, descriptor, host_pointer);
			#else
			return this->image_100(flags, format, descriptor, host_pointer);
			#endif
		}

		std::vector<image_format>
		image_formats(memory_flags flags, memory_objects type) const;

		#if CL_TARGET_VERSION >= 110
		::clx::event event() const;
		#endif

		::clx::buffer
		buffer(
			memory_flags flags,
			size_t size,
			void* host_pointer=nullptr
		) const;

		inline ::clx::sampler
		sampler(
			bool normalised,
			addressing_mode amode,
			filter_mode fmode
		) const {
			#if CL_TARGET_VERSION >= 200
			return this->sampler_200(normalised, amode, fmode);
			#else
			return this->sampler_100(normalised, amode, fmode);
			#endif
		}

		#if CL_TARGET_VERSION >= 200
		::clx::pipe pipe(
			memory_flags flags,
			unsigned_int_type packet_size,
			unsigned_int_type max_packets
		) const;
		#endif

		#if CL_TARGET_VERSION >= 200
		::clx::svm_block shared_memory(
			svm_flags flags,
			size_t size,
			size_t alignment
		) const;
		#endif

		std::vector<context_properties_type>
		properties() const;

		unsigned_int_type
		num_references() const;

		inline context_type
		get() noexcept {
			return this->_ptr;
		}

		inline const context_type
		get() const noexcept {
			return this->_ptr;
		}

		context() = default;

		inline ~context() { this->release(); }
		inline context(const context& rhs): _ptr(rhs._ptr) { this->retain(); }

		inline context&
		operator=(const context& rhs) {
			context tmp(rhs);
			this->swap(tmp);
			return *this;
		}

		inline context(context&& rhs): _ptr(rhs._ptr) { rhs._ptr = nullptr; }
		inline context& operator=(context&& rhs) { this->swap(rhs); return *this; }

		inline void
		release() {
			if (this->_ptr) {
				CLX_CHECK(::clReleaseContext(this->_ptr));
				this->_ptr = nullptr;
			}
		}

		inline void
		retain() {
			if (this->_ptr) {
				CLX_CHECK(::clRetainContext(this->_ptr));
			}
		}

		inline void
		swap(context& rhs) {
			std::swap(this->_ptr, rhs._ptr);
		}

	private:

		#if CL_TARGET_VERSION >= 200
		std::vector<command_queue>
		command_queues_200(command_queue_flags flags) const;
		#endif

		#if CL_TARGET_VERSION <= 120 || defined(CL_USE_DEPRECATED_OPENCL_1_2_APIS)
		std::vector<command_queue>
		command_queues_100(command_queue_flags flags) const;
		#endif

		#if CL_TARGET_VERSION >= 200
		::clx::image
		image_200(
			memory_flags flags,
			const image_format& format,
			const image_descriptor& descriptor,
			void* host_pointer=nullptr
		) const;
		#endif

		#if CL_TARGET_VERSION <= 110 || defined(CL_USE_DEPRECATED_OPENCL_1_1_APIS)
		::clx::image
		image_100(
			memory_flags flags,
			const image_format& format,
			const image_descriptor& descriptor,
			void* host_pointer=nullptr
		) const;
		#endif

		#if CL_TARGET_VERSION >= 200
		::clx::sampler
		sampler_200(
			bool normalised,
			addressing_mode amode,
			filter_mode fmode
		) const;
		#endif

		#if CL_TARGET_VERSION <= 120 || defined(CL_USE_DEPRECATED_OPENCL_1_1_APIS)
		::clx::sampler
		sampler_100(
			bool normalised,
			addressing_mode amode,
			filter_mode fmode
		) const;
		#endif

	};

	inline void
	swap(context& lhs, context& rhs) {
		lhs.swap(rhs);
	}

}

#endif // vim:filetype=cpp
