#ifndef OPENCLX_ERROR
#define OPENCLX_ERROR

#include <iosfwd>
#include <string>
#include <system_error>

#include <openclx/forward>

namespace clx {

	enum class errc: int_type {
		success=CL_SUCCESS,
		device_not_found=CL_DEVICE_NOT_FOUND,
		device_not_available=CL_DEVICE_NOT_AVAILABLE,
		compiler_not_available=CL_COMPILER_NOT_AVAILABLE,
		mem_object_allocation_failure=CL_MEM_OBJECT_ALLOCATION_FAILURE,
		out_of_resources=CL_OUT_OF_RESOURCES,
		out_of_host_memory=CL_OUT_OF_HOST_MEMORY,
		profiling_info_not_available=CL_PROFILING_INFO_NOT_AVAILABLE,
		mem_copy_overlap=CL_MEM_COPY_OVERLAP,
		image_format_mismatch=CL_IMAGE_FORMAT_MISMATCH,
		image_format_not_supported=CL_IMAGE_FORMAT_NOT_SUPPORTED,
		build_program_failure=CL_BUILD_PROGRAM_FAILURE,
		map_failure=CL_MAP_FAILURE,
		#if CL_TARGET_VERSION >= 110
		misaligned_sub_buffer_offset=CL_MISALIGNED_SUB_BUFFER_OFFSET,
		exec_status_error_for_events_in_wait_list=CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST,
		#endif
		#if CL_TARGET_VERSION >= 120
		compile_program_failure=CL_COMPILE_PROGRAM_FAILURE,
		linker_not_available=CL_LINKER_NOT_AVAILABLE,
		link_program_failure=CL_LINK_PROGRAM_FAILURE,
		device_partition_failed=CL_DEVICE_PARTITION_FAILED,
		kernel_arg_info_not_available=CL_KERNEL_ARG_INFO_NOT_AVAILABLE,
		#endif
		invalid_value=CL_INVALID_VALUE,
		invalid_device_type=CL_INVALID_DEVICE_TYPE,
		invalid_platform=CL_INVALID_PLATFORM,
		invalid_device=CL_INVALID_DEVICE,
		invalid_context=CL_INVALID_CONTEXT,
		invalid_queue_properties=CL_INVALID_QUEUE_PROPERTIES,
		invalid_command_queue=CL_INVALID_COMMAND_QUEUE,
		invalid_host_ptr=CL_INVALID_HOST_PTR,
		invalid_mem_object=CL_INVALID_MEM_OBJECT,
		invalid_image_format_descriptor=CL_INVALID_IMAGE_FORMAT_DESCRIPTOR,
		invalid_image_size=CL_INVALID_IMAGE_SIZE,
		invalid_sampler=CL_INVALID_SAMPLER,
		invalid_binary=CL_INVALID_BINARY,
		invalid_build_options=CL_INVALID_BUILD_OPTIONS,
		invalid_program=CL_INVALID_PROGRAM,
		invalid_program_executable=CL_INVALID_PROGRAM_EXECUTABLE,
		invalid_kernel_name=CL_INVALID_KERNEL_NAME,
		invalid_kernel_definition=CL_INVALID_KERNEL_DEFINITION,
		invalid_kernel=CL_INVALID_KERNEL,
		invalid_arg_index=CL_INVALID_ARG_INDEX,
		invalid_arg_value=CL_INVALID_ARG_VALUE,
		invalid_arg_size=CL_INVALID_ARG_SIZE,
		invalid_kernel_args=CL_INVALID_KERNEL_ARGS,
		invalid_work_dimension=CL_INVALID_WORK_DIMENSION,
		invalid_work_group_size=CL_INVALID_WORK_GROUP_SIZE,
		invalid_work_item_size=CL_INVALID_WORK_ITEM_SIZE,
		invalid_global_offset=CL_INVALID_GLOBAL_OFFSET,
		invalid_event_wait_list=CL_INVALID_EVENT_WAIT_LIST,
		invalid_event=CL_INVALID_EVENT,
		invalid_operation=CL_INVALID_OPERATION,
		invalid_buffer_size=CL_INVALID_BUFFER_SIZE,
		invalid_mip_level=CL_INVALID_MIP_LEVEL,
		invalid_global_work_size=CL_INVALID_GLOBAL_WORK_SIZE,
		#if CL_TARGET_VERSION >= 110
		invalid_property=CL_INVALID_PROPERTY,
		#endif
		#if CL_TARGET_VERSION >= 120
		invalid_image_descriptor=CL_INVALID_IMAGE_DESCRIPTOR,
		invalid_compiler_options=CL_INVALID_COMPILER_OPTIONS,
		invalid_linker_options=CL_INVALID_LINKER_OPTIONS,
		invalid_device_partition_count=CL_INVALID_DEVICE_PARTITION_COUNT,
		#endif
		#if CL_TARGET_VERSION >= 200
		invalid_pipe_size=CL_INVALID_PIPE_SIZE,
		invalid_device_queue=CL_INVALID_DEVICE_QUEUE,
		#endif
		#if CL_TARGET_VERSION >= 220
		invalid_spec_id=CL_INVALID_SPEC_ID,
		max_size_restriction_exceeded=CL_MAX_SIZE_RESTRICTION_EXCEEDED,
		#endif
		illegal_read_or_write_to_a_buffer=-9999,
		#if defined(CL_INVALID_GL_OBJECT)
		gl_invalid_object=CL_INVALID_GL_OBJECT,
		#endif
		#if defined(CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR)
		gl_invalid_sharegroup_reference=CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR,
		#endif
		#if defined(CL_PLATFORM_NOT_FOUND_KHR)
		platform_not_found=CL_PLATFORM_NOT_FOUND_KHR,
		#endif
		#if defined(CL_DEVICE_PARTITION_FAILED_EXT)
		device_partition_failed_ext=CL_DEVICE_PARTITION_FAILED_EXT,
		#endif
		#if defined(CL_INVALID_PARTITION_COUNT_EXT)
		invalid_partition_count=CL_INVALID_PARTITION_COUNT_EXT,
		#endif
		#if defined(CL_INVALID_PARTITION_NAME_EXT)
		invalid_partition_name=CL_INVALID_PARTITION_NAME_EXT,
		#endif
		#if defined(CL_GRALLOC_RESOURCE_NOT_ACQUIRED_IMG)
		gralloc_resource_not_acquired=CL_GRALLOC_RESOURCE_NOT_ACQUIRED_IMG,
		#endif
		#if defined(CL_INVALID_EGL_OBJECT_KHR)
		egl_invalid_object=CL_INVALID_EGL_OBJECT_KHR,
		#endif
		#if defined(CL_EGL_RESOURCE_NOT_ACQUIRED_KHR)
		egl_resource_not_acquired=CL_EGL_RESOURCE_NOT_ACQUIRED_KHR,
		#endif
	};

	const char*
	to_string(errc rhs);

	std::ostream&
	operator<<(std::ostream& out, const errc& rhs);

	class error_category: public std::error_category {

	public:

		inline const char*
		name() const noexcept override {
			return "opencl";
		}

		std::string
		message(int ev) const noexcept override;

	};

	extern error_category opencl_category;

	inline std::error_condition
	make_error_condition(errc e) noexcept {
		return std::error_condition(static_cast<int>(e), opencl_category);
	}

}

namespace std {

	template<>
	struct is_error_condition_enum<clx::errc>:
	true_type {};

}

#define CLX_THROW(errcode) \
	throw ::std::system_error(static_cast<int>(errcode), ::clx::opencl_category)

#define CLX_CHECK(errcode) \
	if (static_cast<::clx::errc>(errcode) != ::clx::errc::success) { \
		CLX_THROW(errcode); \
	}

#define CLX_TERMINATE(errcode) \
	if (static_cast<::clx::errc>(errcode) != ::clx::errc::success) { \
		std::terminate(); \
	}



#endif // vim:filetype=cpp
