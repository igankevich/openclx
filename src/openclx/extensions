#ifndef OPENCLX_EXTENSIONS
#define OPENCLX_EXTENSIONS

#include <openclx/forward>

namespace clx {

    enum class extension_number: int {
        khr_gl_sharing=1,
        nv_d3d9_sharing=2,
        nv_d3d10_sharing=3,
        nv_d3d11_sharing=4,
        khr_icd=5,
        khr_d3d10_sharing=6,
        amd_device_attribute_query=7,
        amd_fp64=8,
        amd_media_ops=9,
        ext_migrate_memobject=10,
        ext_device_fission=11,
        ext_atomic_counters_32=12,
        ext_atomic_counters_64=13,
        intel_dx9_media_sharing=14,
        amd_media_ops2=15,
        intel_thread_local_exec=16,
        nv_compiler_options=17,
        nv_device_attribute_query=18,
        nv_pragma_unroll=19,
        intel_device_partition_by_names=20,
        qcom_ext_host_ptr=21,
        qcom_ion_host_ptr=22,
        intel_motion_estimation=23,
        intel_accelerator=24,
        amd_bus_addressable_memory=25,
        arm_get_core_id=26,
        arm_printf=27,
        altera_live_object_tracking=28,
        altera_device_temperature=29,
        altera_compiler_mode=30,
        intel_d3d11_nv12_media_sharing=31,
        qcom_android_native_buffer_host_ptr=32,
        intel_simultaneous_sharing=34,
        intel_va_api_media_sharing=36,
        intel_egl_image_yuv=37,
        arm_import_memory=38,
        arm_non_uniform_work_group_size=39,
        arm_shared_virtual_memory=40,
        arm_thread_limit_hint=41,
        intel_packed_yuv=42,
        img_cached_allocations=44,
        img_use_gralloc_ptr=45,
        img_yuv_image=46,
        intel_planar_yuv=49,
        intel_device_side_avc_motion_estimation=50,
        intel_media_block_io=51,
        arm_integer_dot_product=52,
        qcom_ext_host_ptr_iocoherent=53,
        amd_planar_yuv=54,
    };

    class extensions {

    private:
        std::string _str;

    public:
        inline extensions(const std::string& s): _str(s) {}
        inline extensions(std::string&& s): _str(std::move(s)) {}

        inline bool
        have(const char* name) const {
            return this->_str.find(name) != std::string::npos;
        }

        inline bool operator()(const char* name) const { return this->have(name); }
        inline const std::string& str() const { return this->_str; }

    };

    inline const std::string& to_string(const extensions& ext) { return ext.str(); }

}

#endif // vim:filetype=cpp
