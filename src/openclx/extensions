#ifndef OPENCLX_EXTENSIONS
#define OPENCLX_EXTENSIONS

#include <openclx/forward>

namespace clx {

	class extensions {

	private:
		std::string _str;

	public:
		inline extensions(const std::string& s): _str(s) {}
		inline extensions(std::string&& s): _str(std::move(s)) {}

		inline bool
		have(const char* name) const {
			return this->_str.find(name) != std::string::npos;
		}

		inline bool operator()(const char* name) const { return this->have(name); }
		inline const std::string& str() const { return this->_str; }

	};

	inline const std::string& to_string(const extensions& ext) { return ext.str(); }

}

#endif // vim:filetype=cpp
