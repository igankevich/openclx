#ifndef OPENCLX_FORWARD
#define OPENCLX_FORWARD

#include <iosfwd>
#include <string>
#include <system_error>
#include <vector>

#include <openclx/cl>

namespace clx {

	typedef ::cl_char char_type;
	typedef ::cl_uchar unsigned_char_type;
	typedef ::cl_short short_type;
	typedef ::cl_ushort unsigned_short_type;
	typedef ::cl_int int_type;
	typedef ::cl_uint unsigned_int_type;
	typedef ::cl_long long_type;
	typedef ::cl_ulong unsigned_long_type;
	typedef ::cl_half half_type;
	typedef ::cl_float float_type;
	typedef ::cl_double double_type;

	typedef ::cl_GLuint opengl_unsigned_int_type;
	typedef ::cl_GLint opengl_int_type;
	typedef ::cl_GLenum opengl_enum_type;

	typedef ::cl_platform_id platform_type;
	typedef ::cl_device_id device_type;
	typedef ::cl_context context_type;
	typedef ::cl_command_queue command_queue_type;
	typedef ::cl_mem memory_type;
	typedef ::cl_program program_type;
	typedef ::cl_kernel kernel_type;
	typedef ::cl_event event_type;
	typedef ::cl_sampler sampler_type;

	typedef ::cl_bool bool_type;
	typedef ::cl_bitfield bitfield_type;
	typedef ::cl_device_mem_cache_type device_memory_cache_type;
	typedef ::cl_device_local_mem_type device_local_memory_type;
	typedef ::cl_device_exec_capabilities execution_flags_type;
	typedef ::cl_device_fp_config floating_point_flags_type;
	typedef ::cl_command_queue_properties command_queue_flags_type;
	typedef ::cl_device_type device_flags_type;
	typedef ::cl_context_properties context_properties_type;
	typedef ::cl_channel_order channel_order_type;
	typedef ::cl_channel_type channel_data_type;
	typedef ::cl_image_format image_format_type;
	typedef ::cl_build_status build_status_type;
	typedef ::cl_command_type command_type;
	typedef ::cl_int execution_status_type;
	typedef ::cl_mem_object_type memory_objects_type;
	typedef ::cl_mem memory_object_type;
	typedef ::cl_mem_flags memory_flags_type;
	typedef ::cl_map_flags map_flags_type;
	typedef ::cl_addressing_mode addressing_mode_type;
	typedef ::cl_filter_mode filter_mode_type;

	#if CL_TARGET_VERSION >= 110
	typedef ::cl_buffer_region buffer_region_type;
	#endif

	#if CL_TARGET_VERSION >= 120
	typedef ::cl_mem_migration_flags migration_flags_type;
	typedef ::cl_device_partition_property device_partition_type;
	typedef ::cl_device_affinity_domain device_affinity_domain_type;
	typedef ::cl_kernel_arg_type_qualifier argument_type_qualifiers_type;
	typedef ::cl_kernel_arg_access_qualifier access_qualifiers_type;
	typedef ::cl_kernel_arg_address_qualifier address_qualifiers_type;
	typedef ::cl_image_desc image_descriptor_type;
	typedef ::cl_program_binary_type program_binary_type;

	enum class migration_flags: migration_flags_type;
	enum class device_partition: device_partition_type;
	enum class device_affinity_domain: device_affinity_domain_type;
	enum class argument_type_qualifiers: argument_type_qualifiers_type;
	enum class binary_types: program_binary_type;
	#endif

	#if CL_TARGET_VERSION < 200 && defined(cl_khr_create_command_queue)
	typedef ::cl_queue_properties_khr queue_properties_type;
	#endif

	#if CL_TARGET_VERSION >= 200
	typedef ::cl_sampler_properties sampler_properties_type;
	typedef ::cl_queue_properties queue_properties_type;
	typedef ::cl_device_svm_capabilities svm_flags_type;
	typedef ::cl_pipe_properties pipe_properties_type;
	typedef ::cl_kernel_exec_info kernel_execution_info_type;

	enum class svm_flags: svm_flags_type;
	class svm_block;
	template <class T, svm_flags F> class svm_allocator;
	class pipe;
	#endif

	class binary;
	class buffer;
	class buffer_slice;
	class color;
	class command_queue;
	class compiler;
	class context;
	class context_properties;
	class device;
	class error_category;
	class event;
	class event_stack;
	class extensions;
	class header;
	class image;
	class image_format;
	class intermediate_language;
	class kernel;
	class kernel_argument;
	class memory_object;
	class pattern;
	class platform;
	class program;
	class range;
	class sampler;
	class sampler_properties;

	enum class addressing_mode: addressing_mode_type;
	enum class build_status: build_status_type;
	enum class channel_data: channel_data_type;
	enum class channel_order: channel_order_type;
	enum class command: command_type;
	enum class command_queue_flags: command_queue_flags_type;
	enum class device_flags: device_flags_type;
	enum class device_local_memory: device_local_memory_type;
	enum class device_memory_cache: device_memory_cache_type;
	enum class errc: int_type;
	enum class execution_flags: execution_flags_type;
	enum class execution_status: execution_status_type;
	enum class filter_mode: filter_mode_type;
	enum class floating_point_flags: floating_point_flags_type;
	enum class map_flags: map_flags_type;
	enum class memory_flags: memory_flags_type;
	enum class memory_objects: memory_objects_type;

	typedef void* host_pointer;
	typedef const void* const_host_pointer;

	template <class T> class downcast_type;
	template <class T> class array_view;
	template <class T> class slice_3d;
	template <class T> struct local;
	template <class T, int N> union Vector;
	template <class T> struct numeric_limits;
	struct numeric_limits_half;
	struct work_group;
	class range;
	typedef void (*native_kernel_type)(void *);
	struct image_descriptor;

	const char* to_string(errc rhs);
	std::ostream& operator<<(std::ostream& out, const errc& rhs);
	std::error_condition make_error_condition(errc e) noexcept;
	std::ostream& operator<<(std::ostream& out, const binary& rhs);
	std::istream& operator>>(std::istream& in, binary& rhs);
	template <class T, int N> Vector<T,N> make_vector(const array_view<T>& rhs);
	template <class T> const typename downcast_type<T>::type* downcast(const T* x);
	template <class T> typename downcast_type<T>::type* downcast(T* x);
	template <class T> typename downcast_type<T>::type downcast(T x);
	template <class ... Args> class argument;
	template <class ... Args> argument<Args...> make_arguments(const Args& ... args);

	void swap(context& lhs, context& rhs);
	void swap(platform& lhs, platform& rhs);
	void swap(device& lhs, device& rhs);
	void swap(program& lhs, program& rhs);
	void swap(kernel& lhs, kernel& rhs);
	void swap(event& lhs, event& rhs);
	void swap(memory_object& lhs, memory_object& rhs);
	void swap(sampler& lhs, sampler& rhs);
	void swap(command_queue& lhs, command_queue& rhs);
	#if CL_TARGET_VERSION >= 200
	void swap(svm_block& lhs, svm_block& rhs);
	#endif

	std::vector<platform> platforms();

	#if CL_TARGET_VERSION <= 110 || defined(CL_USE_DEPRECATED_OPENCL_1_1_APIS)
	void unload_compiler();
	void* extension_function_address(const char* name);
	#endif

	#if CL_TARGET_VERSION >= 120
	program
	link(
		const array_view<program>& programs,
		const std::string& options,
		const array_view<device>& devices
	);
	program
	link(const array_view<program>& programs, const std::string& options);
	#endif

	void
	wait(const array_view<event>& events);

	#if defined(cl_khr_gl_sharing)
	namespace gl {

		typedef ::cl_GLuint unsigned_int_type;
		typedef ::cl_GLint int_type;
		typedef ::cl_GLenum enum_type;
		typedef ::cl_GLsync sync_type;

		typedef ::cl_gl_object_type memory_objects_type;
		enum class memory_objects: memory_objects_type;

		class buffer;
		class texture;

	}
	#endif

	#if defined(cl_khr_egl_event) || defined(cl_khr_egl_image)
	namespace egl {
		typedef ::CLeglDisplayKHR display_type;
		typedef ::CLeglSyncKHR sync_type;
		#if defined(cl_khr_egl_image)
		typedef ::CLeglImageKHR image_type;
		class image;
		#endif
	}
	#endif

	#if defined(cl_khr_dx9_media_sharing)
	namespace dx9 {
		typedef ::cl_dx9_media_adapter_type_khr media_adapter_type;
		typedef ::cl_dx9_media_adapter_set_khr media_adapter_set;
	}
	#endif

	#if defined(cl_arm_import_memory)
	namespace arm {
		typedef ::cl_import_properties_arm import_properties_type;
		enum class memory_type: unsigned_int_type;
		class import_properties;
	}
	#endif

}

#endif // vim:filetype=cpp
