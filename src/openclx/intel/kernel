#ifndef OPENCLX_INTEL_KERNEL
#define OPENCLX_INTEL_KERNEL

#include <openclx/forward>
#include <openclx/kernel>

namespace clx {

    namespace intel {

        struct work_group: public ::clx::work_group {
            #if CL_TARGET_VERSION >= 120 && defined(cl_intel_required_subgroup_size)
            unsigned_long_type spill_memory_size = 0;
            #endif
        };

        class kernel: public ::clx::kernel {

        public:

            #if CL_TARGET_VERSION >= 120 && defined(cl_intel_required_subgroup_size)
            ::clx::intel::work_group work_group(const device& dev) const;
            #endif

            #if CL_TARGET_VERSION >= 120 && defined(cl_intel_required_subgroup_size)
            size_t sub_groups_size(const device& device) const;
            #endif

            using ::clx::kernel::kernel;
            inline kernel(const ::clx::kernel& rhs): ::clx::kernel(rhs) {}
            inline kernel(::clx::kernel&& rhs): ::clx::kernel(std::move(rhs)) {}
            inline kernel& operator=(const ::clx::kernel& rhs) {
                this->::clx::kernel::operator=(rhs);
                return *this;
            }
            inline kernel& operator=(::clx::kernel&& rhs) {
                this->::clx::kernel::swap(rhs);
                return *this;
            }

            inline ::clx::intel::context
            context() const {
                return ::clx::kernel::context();
            }

        };

    }

}

#endif // vim:filetype=cpp
