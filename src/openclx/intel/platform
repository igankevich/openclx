#ifndef OPENCLX_INTEL_PLATFORM
#define OPENCLX_INTEL_PLATFORM

#include <openclx/platform>
#include <openclx/forward>

namespace clx {

    namespace intel {

        class platform: public ::clx::platform {

        public:

            #if defined(cl_intel_dx9_media_sharing)
            std::vector<device>
            devices(device_source src, void* object, device_set set) const;
            #endif

            #if defined(cl_intel_va_api_media_sharing)
            std::vector<device>
            devices(va::device_source src, void* object, va::device_set set) const;
            #endif

            using ::clx::platform::platform;
            inline platform(const ::clx::platform& rhs): ::clx::platform(rhs) {}
            inline platform(::clx::platform&& rhs): ::clx::platform(std::move(rhs)) {}
            inline platform& operator=(const ::clx::platform& rhs) {
                this->::clx::platform::operator=(rhs);
                return *this;
            }
            inline platform& operator=(::clx::platform&& rhs) {
                this->::clx::platform::swap(rhs);
                return *this;
            }

        };

    }

}

#endif // vim:filetype=cpp


