#ifndef OPENCLX_MEMORY_FLAGS
#define OPENCLX_MEMORY_FLAGS

#include <openclx/bits/flags>
#include <openclx/forward>

namespace clx {

	enum class memory_flags: memory_flags_type {
		read_write = CL_MEM_READ_WRITE,
		write_only = CL_MEM_WRITE_ONLY,
		read_only = CL_MEM_READ_ONLY,
		use_host_ptr = CL_MEM_USE_HOST_PTR,
		alloc_host_ptr = CL_MEM_ALLOC_HOST_PTR,
		copy_host_ptr = CL_MEM_COPY_HOST_PTR,
		#if CL_TARGET_VERSION >= 120
		host_write_only = CL_MEM_HOST_WRITE_ONLY,
		host_read_only = CL_MEM_HOST_READ_ONLY,
		host_no_access = CL_MEM_HOST_NO_ACCESS,
		#endif
		#if CL_TARGET_VERSION >= 200
		kernel_read_and_write = CL_MEM_KERNEL_READ_AND_WRITE,
		#endif
		#if CL_TARGET_VERSION >= 200
		svm_fine_grain_buffer = CL_MEM_SVM_FINE_GRAIN_BUFFER,
		svm_atomics = CL_MEM_SVM_ATOMICS,
		#elif CL_TARGET_VERSION >= 120 && defined(cl_arm_shared_virtual_memory)
		svm_fine_grain_buffer_arm=CL_MEM_SVM_FINE_GRAIN_BUFFER_ARM,
		svm_atomics_arm=CL_MEM_SVM_ATOMICS_ARM,
		#endif
		#if defined(CL_MEM_USE_UNCACHED_CPU_MEMORY_IMG)
		uncached = CL_MEM_USE_UNCACHED_CPU_MEMORY_IMG,
		#endif
		#if defined(CL_MEM_USE_CACHED_CPU_MEMORY_IMG)
		cached = CL_MEM_USE_CACHED_CPU_MEMORY_IMG,
		#endif
		#if CL_TARGET_VERSION >= 120 && defined(CL_MEM_USE_GRALLOC_PTR_IMG)
		use_gralloc_ptr = CL_MEM_USE_GRALLOC_PTR_IMG,
		#endif
	};

	CLX_FLAGS(memory_flags, memory_flags_type)

}

#endif // vim:filetype=cpp

