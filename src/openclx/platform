#ifndef OPENCLX_PLATFORM
#define OPENCLX_PLATFORM

#include <chrono>
#include <string>
#include <vector>

#include <openclx/device_flags>
#include <openclx/error>
#include <openclx/forward>

namespace clx {

    enum class extension_function {
        clCreateCommandQueueWithPropertiesKHR,
        clTerminateContextKHR,
        clEnqueueMigrateMemObjectEXT,
        clGetKernelSubGroupInfoKHR,
        clGetGLContextInfoKHR,
        clCreateEventFromEGLSyncKHR,
        clCreateFromEGLImageKHR,
        clEnqueueAcquireEGLObjectsKHR,
        clEnqueueReleaseEGLObjectsKHR,
        clImportMemoryARM,
        clReleaseDeviceEXT,
        clRetainDeviceEXT,
        clCreateSubDevicesEXT,
        clSVMAllocARM,
        clSVMFreeARM,
        clEnqueueSVMFreeARM,
        clEnqueueSVMMemcpyARM,
        clEnqueueSVMMemFillARM,
        clEnqueueSVMMapARM,
        clEnqueueSVMUnmapARM,
        clSetKernelArgSVMPointerARM,
        clSetKernelExecInfoARM,
        clCreateAcceleratorINTEL,
        clGetAcceleratorInfoINTEL,
        clRetainAcceleratorINTEL,
        clReleaseAcceleratorINTEL,
        clGetDeviceImageInfoQCOM,
        clGetDeviceIDsFromDX9MediaAdapterKHR,
        clCreateFromDX9MediaSurfaceKHR,
        clEnqueueAcquireDX9MediaSurfacesKHR,
        clEnqueueReleaseDX9MediaSurfacesKHR,
        clGetDeviceIDsFromD3D10KHR,
        clCreateFromD3D10BufferKHR,
        clCreateFromD3D10Texture2DKHR,
        clCreateFromD3D10Texture3DKHR,
        clEnqueueAcquireD3D10ObjectsKHR,
        clEnqueueReleaseD3D10ObjectsKHR,
        clGetDeviceIDsFromD3D11KHR,
        clCreateFromD3D11BufferKHR,
        clCreateFromD3D11Texture2DKHR,
        clCreateFromD3D11Texture3DKHR,
        clEnqueueAcquireD3D11ObjectsKHR,
        clEnqueueReleaseD3D11ObjectsKHR,
        clGetDeviceIDsFromDX9INTEL,
        clCreateFromDX9MediaSurfaceINTEL,
        clEnqueueAcquireDX9ObjectsINTEL,
        clEnqueueReleaseDX9ObjectsINTEL,
        clGetDeviceIDsFromVA_APIMediaAdapterINTEL,
        clCreateFromVA_APIMediaSurfaceINTEL,
        clEnqueueAcquireVA_APIMediaSurfacesINTEL,
        clEnqueueReleaseVA_APIMediaSurfacesINTEL,
        clEnqueueAcquireGrallocObjectsIMG,
        clEnqueueReleaseGrallocObjectsIMG,
        size
    };

    class platform {

    public:
        typedef std::chrono::nanoseconds nanoseconds;
        typedef void* function_address;

    private:
        platform_type _ptr = nullptr;
        mutable std::vector<function_address> _functions;

    public:

        inline explicit
        platform(platform_type ptr): _ptr(ptr) {}

        std::string profile() const;
        std::string version() const;
        std::string name() const;
        std::string vendor() const;
        ::clx::extensions extensions() const;
        #if defined(CL_PLATFORM_ICD_SUFFIX_KHR)
        std::string suffix() const;
        #endif

        std::vector<device>
        devices(device_flags types) const;

        inline void
        unload_compiler() {
            #if CL_TARGET_VERSION >= 120 && defined(CLX_HAVE_clUnloadPlatformCompiler)
            CLX_CHECK(::clUnloadPlatformCompiler(this->_ptr));
            #else
            CLX_CHECK(::clUnloadCompiler());
            #endif
        }

        inline void*
        extension_function_address(const char* name) const {
            #if CL_TARGET_VERSION >= 120 && \
                defined(CLX_HAVE_clGetExtensionFunctionAddressForPlatform)
            return ::clGetExtensionFunctionAddressForPlatform(this->_ptr, name);
            #else
            return ::clGetExtensionFunctionAddress(name);
            #endif
        }

        template <class Function>
        inline Function
        extension(const char* name) const {
            return reinterpret_cast<Function>(extension_function_address(name));
        }

        template <class Function>
        inline Function
        function(extension_function func) const {
            return reinterpret_cast<Function>(this->do_function(func));
        }

        #if CL_TARGET_VERSION >= 210
        nanoseconds timer_resolution() const;
        #endif

        #if CL_TARGET_VERSION >= 120 && defined(cl_khr_dx9_media_sharing)
        std::vector<device>
        devices(
            d3d9::adapter_set flags,
            std::vector<std::pair<d3d9::adapter_type,void*>> adapters
        ) const;
        #endif

        #if defined(cl_khr_d3d10_sharing)
        std::vector<device>
        devices(d3d10::device_type* object, d3d10::device_set set) const;
        std::vector<device>
        devices(d3d10::dxgi_adapter_type* object, d3d10::device_set set) const;
        #endif

        #if CL_TARGET_VERSION >= 120 && defined(cl_khr_d3d11_sharing)
        std::vector<device>
        devices(d3d11::device_type* object, d3d11::device_set set) const;
        std::vector<device>
        devices(d3d11::dxgi_adapter_type* object, d3d11::device_set set) const;
        #endif

        platform() = default;
        ~platform() = default;
        platform(const platform&) = default;
        platform& operator=(const platform&) = default;

        inline
        platform(platform&& rhs): _ptr(rhs._ptr) { rhs._ptr = nullptr; }

        inline platform&
        operator=(platform&& rhs) {
            this->_ptr = rhs._ptr;
            rhs._ptr = nullptr;
            this->_functions = std::move(rhs._functions);
            return *this;
        }

        inline void
        swap(platform& rhs) {
            std::swap(this->_ptr, rhs._ptr);
            std::swap(this->_functions, rhs._functions);
        }

        inline platform_type
        get() noexcept {
            return this->_ptr;
        }

        inline const platform_type
        get() const noexcept {
            return this->_ptr;
        }

    private:

        function_address
        do_function(extension_function func) const;

    };

    inline void
    swap(platform& lhs, platform& rhs) {
        lhs.swap(rhs);
    }

    std::vector<platform>
    platforms();

    #if CL_TARGET_VERSION <= 110 || defined(CL_USE_DEPRECATED_OPENCL_1_1_APIS)
    inline void
    unload_compiler() {
        CLX_CHECK(::clUnloadCompiler());
    }
    #endif

    #if CL_TARGET_VERSION <= 110 || defined(CL_USE_DEPRECATED_OPENCL_1_1_APIS)
    inline void*
    extension_function_address(const char* name) {
        return ::clGetExtensionFunctionAddress(name);
    }
    #endif

}

#endif // vim:filetype=cpp
