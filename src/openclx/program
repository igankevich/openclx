#ifndef OPENCLX_PROGRAM
#define OPENCLX_PROGRAM

#include <string>
#include <vector>

#include <openclx/binary>
#include <openclx/build_status>
#include <openclx/error>
#include <openclx/types>

namespace clx {

	class program {

	public:
		typedef void (*callback_type)(program_type, void *);
		typedef std::vector<device> device_array;
		typedef std::vector<header> header_array;

	private:
		program_type _ptr = nullptr;

	public:

		inline explicit
		program(program_type ptr): _ptr(ptr) {}

		void build(const std::string& options);
		void build(const std::string& options, const device_array& devices);
		::clx::build_status build_status(const device& dev) const;
		std::string options(const device& dev) const;
		std::string build_log(const device& dev) const;
		std::vector<binary> binaries() const;

		#if CL_TARGET_VERSION >= 120
		void compile(const std::string& options);
		void compile(const std::string& options, const device_array& devices);
		void compile(const std::string& options, const header_array& headers);
		void compile(
			const std::string& options,
			const header_array& headers,
			const device_array& devices
		);
		#endif

		std::vector<::clx::kernel> kernels() const;
		::clx::kernel kernel(const char* name) const;
		::clx::context context() const;
		unsigned_int_type num_references() const;
		unsigned_int_type num_devices() const;
		std::vector<device> devices() const;
		std::string source() const;

		#if CL_TARGET_VERSION >= 220
		inline void
		callback(callback_type cb, void* data=nullptr) {
			CLX_CHECK(::clSetProgramReleaseCallback(this->_ptr, cb, data));
		}
		#endif

		#if CL_TARGET_VERSION >= 220
		template <class T>
		inline void
		constant(unsigned_int_type id, T value) {
			CLX_CHECK(::clSetProgramSpecializationConstant(
				this->_ptr, id, sizeof(T), &value
			));
		}
		#endif

		inline program_type
		get() noexcept {
			return this->_ptr;
		}

		inline const program_type
		get() const noexcept {
			return this->_ptr;
		}

		program() = default;
		inline ~program() { this->release(); }
		inline program(const program& rhs): _ptr(rhs._ptr) { this->retain(); }

		inline program&
		operator=(const program& rhs) {
			program tmp(rhs);
			this->swap(tmp);
			return *this;
		}

		inline program(program&& rhs): _ptr(rhs._ptr) { rhs._ptr = nullptr; }
		inline program& operator=(program&& rhs) { this->swap(rhs); return *this; }

		inline void
		release() {
			if (this->_ptr) {
				CLX_CHECK(::clReleaseProgram(this->_ptr));
				this->_ptr = nullptr;
			}
		}

		inline void
		retain() {
			if (this->_ptr) {
				CLX_CHECK(::clRetainProgram(this->_ptr));
			}
		}

		inline void
		swap(program& rhs) {
			std::swap(this->_ptr, rhs._ptr);
		}

	};

	inline void
	swap(program& lhs, program& rhs) {
		lhs.swap(rhs);
	}

	#if CL_TARGET_VERSION >= 120
	program
	link(const std::vector<program>& programs, const std::string& options);
	#endif

	#if CL_TARGET_VERSION >= 120
	program
	link(
		const std::vector<program>& programs,
		const std::string& options,
		const program::device_array& devices
	);
	#endif

	class header {
	public:
		::clx::program program;
		std::string name;
	};

}

#endif // vim:filetype=cpp
